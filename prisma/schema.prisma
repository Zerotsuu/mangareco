// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("POSTGRES_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}


model User {
    id            String    @id @default(cuid())
    clerkId       String    @unique
    email         String?    @unique
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    mangaList     MangaList[]
}

model UserProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  experience String?  // e.g., "new", "intermediate", "experienced"
  favoriteGenres String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MangaList {
    id         Int      @id @default(autoincrement())
    userId     String
    mangaId    Int
    status     String   // e.g., "Reading", "Completed", "Plan to Read"
    likeStatus String?  // e.g., "like", "dislike", null
    addedAt    DateTime @default(now())
    updatedAt  DateTime @updatedAt
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, mangaId])
}

model Manga {
    id           Int      @id
    title        String
    genres       String[]
    author       String
    averageScore Float
    popularity   Int
}
